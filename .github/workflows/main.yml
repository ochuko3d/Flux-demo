name: Build and Deploy Web App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/nginx-web-app
  HELM_CHART_PATH: demo/package/charts/web-app

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      helm_version: ${{ steps.get_versions.outputs.helm_version }}
      docker_version: ${{ steps.get_versions.outputs.docker_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Version
        id: get_version
        run: |
          HELM_VERSION=$(grep '^version:' ${{ env.HELM_CHART_PATH }}/Chart.yaml | awk '{print $2}')
          DOCKER_VERSION=$(grep '^appVersion:' ${{ env.HELM_CHART_PATH }}/Chart.yaml | awk '{print $2}')
          echo "helm_version=${HELM_VERSION}" >> $GITHUB_OUTPUT
          echo "docker_version=${DOCKER_VERSION}" >> $GITHUB_OUTPUT
          echo "Helm version: ${HELM_VERSION}, Docker version: ${DOCKER_VERSION}"

  build-and-test:
    needs: version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up QEMU for multi-arch
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          network=host

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v4
      with:
        context: demo/image
        file: demo/image/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.docker_version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Scan with Trivy (AMD64)
      if: success() && github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.extract_versions.outputs.docker_version }}
        format: 'sarif'
        exit-code: ${{ github.event_name == 'push' && '1' || '0' }}
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        platform: linux/amd64
        trivyignores: 'demo/image/.trivyignore'

  validate-helm:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.11.2

    - name: Lint Helm Chart
      run: |
        cd ${{ env.HELM_CHART_PATH }}
        helm lint .

  deploy-local:
    runs-on: ubuntu-latest
    needs: [validate-helm, version]
    if: github.event_name != 'pull_request'
    environment: production
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Create kind cluster
      uses: helm/kind-action@v1.5.0
      with:
        cluster_name: kind
        node_image: kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72  # AMD64
        wait: 30s

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.11.2

    - name: Deploy to local cluster
      run: |
        FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        VERSION="${{ needs.version.outputs.docker_version }}"
        
        docker pull --platform linux/amd64 "${FULL_IMAGE_NAME}:${VERSION}"
        kind load docker-image "${FULL_IMAGE_NAME}:${VERSION}" --name kind
        
        helm upgrade --install web-app ${{ env.HELM_CHART_PATH }} \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ needs.version.outputs.docker_version }} \
          --set image.pullPolicy=IfNotPresent \
          --version ${{ needs.version.outputs.helm_version }} \
          --debug --wait --timeout 2m
        
        kubectl get pods -o wide -w
  tag_repository:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse -q --verify "refs/tags/v${{ needs.version.outputs.helm_version }}"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        if: steps.check_tag.outputs.tag_exists == 'false' && github.event_name == 'push'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ needs.version.outputs.helm_version }}" -m "Release v${{ needs.version.outputs.helm_version }}"
          git push origin "v${{ needs.version.outputs.helm_version }}"